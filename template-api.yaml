AWSTemplateFormatVersion: 2010-09-09
Description: ECS Fargate Deployment with a FastAPI App


Parameters:
  GitHubOwner:
    Type: String
    Default: VictorSnt
    Description: O nome do repositorio owner.

  GitHubRepo:
    Type: String
    Default: aws_test
    Description: O nome do repositorio da aplicacao.

  GitHubBranch:
    Type: String
    Default: main
    Description: Branch alvo da integracao continua.

  GitHubToken:
    Type: String
    NoEcho: true
    Description: Token OAuth @GitHub. (https://github.com/settings/tokens)


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "GitHub Repository Configuration"
        Parameters:
          - GitHubOwner
          - GitHubRepo
          - GitHubBranch
          - GitHubToken

Resources:
  # ------------------------------
  # RECURSOS DE REDE
  # ------------------------------
  
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ECS-Fargate-VPC

  # Subnet Pública
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.0.0/24"
      AvailabilityZone: "sa-east-1a"  # Altere para sua zona de disponibilidade
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ECS-Fargate-Public-Subnet

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ECS-Fargate-IGW

  # Associar o Internet Gateway com a VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Tabela de Rotas
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Associação da Sub-rede Pública à Tabela de Rotas Pública
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Rota da Internet
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # ------------------------------
  # RECURSOS DE SEGURANÇA
  # ------------------------------
  
  # Security Group
  ApiSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to ECS Tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"  # Permite tráfego HTTP da internet

  # ------------------------------
  # RECURSOS ECS
  # ------------------------------
  
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: FastAPI-Cluster

  # Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: FastAPI-Task
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:  # Adiciona compatibilidade Fargate
      - FARGATE
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn 
      ContainerDefinitions:
        - Name: !Sub ${AWS::StackName}-container-def
          Image: !GetAtt ECRRepository.RepositoryUri
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
          Essential: true
      TaskRoleArn: !GetAtt ExecutionRole.Arn  # Adicionando Task Role com as permissões necessárias

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Ref: PublicSubnet
          SecurityGroups:
            - Ref: ApiSecurityGroup
          AssignPublicIp: ENABLED  # Atribui IP público à Task

  # ------------------------------
  # RECURSOS IAM
  # ------------------------------

  # Role de Execução para o ECS (acesso ao ECR)
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "ECRAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  
  # Role para o CodePipeline
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codepipeline.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CodePipelineAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Effect: "Allow"
                Action:
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                  - iam:PassRole
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: "*"

  # Role para o CodeBuild
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codebuild.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CodeBuildAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - iam:PassRole
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:GetRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - cloudformation:*
                  - lambda:*
                  - events:*
                  - sqs:*
                  - s3:*
                  - ssm:PutParameter
                Resource: "*"
              - Resource: !GetAtt ECRRepository.Arn
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:GetAuthorizationToken
              - Resource: !GetAtt ECSService.ServiceArn
                Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
  
  
  # ------------------------------
  # RECURSOS DO ECR
  # ------------------------------
  
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}-repository



  # ------------------------------
  # RECURSOS DO CODEBUILD
  # ------------------------------

  # Projeto CodeBuild para construir a imagem Docker
  MainBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-main-codebuild-project
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: "buildspec.yaml"
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:5.0
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: "ECR_REPO_URI"
            Value: !GetAtt ECRRepository.RepositoryUri
          - Name: CONTAINER_DEFINITION
            Type: PLAINTEXT
            Value: !Sub ${AWS::StackName}-container-def
      ServiceRole: !GetAtt CodeBuildRole.Arn


  # ------------------------------
  # RECURSOS DA CODEPIPELINE
  # ------------------------------

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AWS::StackName}-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: BuildImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref MainBuildProject
        - Name: Deploy
          Actions:
            - Name: ECSDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: "1"
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName: !Ref ECSCluster
                ServiceName: !Ref ECSService
                FileName: "imagedefinitions.json"

  PipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Name: !Sub ${AWS::StackName}-pipeline-webhook
      TargetPipeline: !Ref CodePipeline  # Adicione esta linha
      TargetPipelineVersion: !GetAtt CodePipeline.Version
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubToken
      TargetAction: Source
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: "refs/heads/{Branch}"
      RegisterWithThirdParty: true
    DependsOn:
      - CodePipeline

  #-----------------------------
  # RECURSOS DO S3
  #-----------------------------
  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "${AWS::StackName}-deploy-bucket"